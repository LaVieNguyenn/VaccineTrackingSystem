@using VaccineTrakingSystem.DAL.Models
@model IEnumerable<User>
@{
    ViewData["Title"] = "Account List";
}
<section class="section">
   
    <div class="modal fade" id="editAccountModal" tabindex="-1" aria-labelledby="editAccountModalLabel" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title fw-bold" id="editAccountModalLabel">Edit Account</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <form id="editAccountForm">
                        <input type="hidden" id="editUserId">

                        <div class="mb-3">
                            <label for="editUsername" class="form-label fw-semibold">Username</label>
                            <input type="text" class="form-control" id="editUsername" required>
                        </div>

                        <div class="mb-3">
                            <label for="editEmail" class="form-label fw-semibold">Email</label>
                            <input type="email" class="form-control" id="editEmail" required>
                        </div>

                        <div class="mb-3">
                            <label for="editFullName" class="form-label fw-semibold">Full Name</label>
                            <input type="text" class="form-control" id="editFullName">
                        </div>

                        <div class="mb-3">
                            <label for="editPhoneNumber" class="form-label fw-semibold">Phone Number</label>
                            <input type="text" class="form-control" id="editPhoneNumber">
                        </div>

                        <div class="mb-3">
                            <label for="editAddress" class="form-label fw-semibold">Address</label>
                            <input type="text" class="form-control" id="editAddress">
                        </div>

                        <div class="mb-3">
                            <label for="editRole" class="form-label fw-semibold">Role</label>
                            <select class="form-control" id="editRole">
                                <option value="2">Customer</option>
                                <option value="3">Staff</option>
                                <option value="4">Admin</option>
                            </select>
                        </div>
                        <div class="d-flex justify-content-between">
                            <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                            <button type="submit" class="btn btn-primary">Save Changes</button>
                        </div>
                    </form>
                </div>
            </div>
        </div>
    </div>
    
    <div class="modal fade" id="createAccountModal" tabindex="-1" aria-labelledby="createAccountModalLabel" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title fw-bold" id="createAccountModalLabel">Create New Account</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <form id="createAccountForm">
                        <div class="mb-3">
                            <label for="createUsername" class="form-label fw-semibold">Username</label>
                            <input type="text" class="form-control" id="createUsername" required>
                        </div>

                        <div class="mb-3">
                            <label for="createEmail" class="form-label fw-semibold">Email</label>
                            <input type="email" class="form-control" id="createEmail" required>
                        </div>

                        <div class="mb-3">
                            <label for="createFullName" class="form-label fw-semibold">Full Name</label>
                            <input type="text" class="form-control" id="createFullName">
                        </div>

                        <div class="mb-3">
                            <label for="createPhoneNumber" class="form-label fw-semibold">Phone Number</label>
                            <input type="text" class="form-control" id="createPhoneNumber">
                        </div>

                        <div class="mb-3">
                            <label for="createAddress" class="form-label fw-semibold">Address</label>
                            <input type="text" class="form-control" id="createAddress">
                        </div>

                        <div class="mb-3">
                            <label for="createPassword" class="form-label fw-semibold">Password</label>
                            <input type="password" class="form-control" id="createPassword" required>
                        </div>

                        <div class="mb-3">
                            <label for="createRole" class="form-label fw-semibold">Role</label>
                            <select class="form-control" id="createRole">
                                <option value="2">Customer</option>
                                <option value="3">Staff</option>
                                <option value="4">Admin</option>
                            </select>
                        </div>

                        <div class="d-flex justify-content-between">
                            <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                            <button type="submit" class="btn btn-primary">Create Account</button>
                        </div>
                    </form>
                </div>
            </div>
        </div>
    </div>

    <div class="container">
        <div class="row">
            <div class="col-lg-12">
                <div class="page-wrapper">
                    <h3 class="fw-bold text-dark mb-4">Account List</h3>

                    <div class="d-flex justify-content-end mb-3">
                        <button class="btn btn-success" data-bs-toggle="modal" data-bs-target="#createAccountModal">Create New User</button>

                    </div>

                    @if (Model != null && Model.Any())
                    {
                        <div class="table-responsive">
                            <table class="table table-bordered shadow-sm">
                                <thead class="table-light text-primary text-center">
                                    <tr>
                                        <th style="width: 15%;text-align:center">User ID</th>
                                        <th style="width: 12%;text-align:center">User Name</th>
                                        <th style="width: 20%;text-align:center">Email</th>
                                        <th style="width: 15%;text-align:center">Full Name</th>
                                        <th style="width: 15%;text-align:center">Phone Number</th>
                                        <th style="width: 15%;text-align:center">Address</th>
                                        <th style="width: 10%;text-align:center">Role</th>
                                        <th style="width: 18%;text-align:center">Actions</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var account in Model)
                                    {
                                        <tr class="align-middle text-center">
                                            <td style="text-align:center">@account.UserId</td>
                                            <td style="text-align:center" class="fw-bold">@account.Username</td>
                                            <td style="text-align:center" class="text-start">@account.Email</td>
                                            <td style="text-align:center">@account.FullName</td>
                                            <td style="text-align:center">@account.PhoneNumber</td>
                                            <td style="text-align:center">@account.Address</td>
                                            <td style="text-align:center">
                                                <span class="badge
                                                    @(account.RoleId == 2 ? "bg-primary" :
                                                      account.RoleId == 3 ? "bg-success" :
                                                      account.RoleId == 4 ? "bg-danger" : "bg-secondary") text-dark">
                                                    @(account.RoleId == 2 ? "Customer" :
                                                        account.RoleId == 3 ? "Staff" :
                                                        account.RoleId == 4 ? "Admin" : "Unknown")
                                                </span>
                                            </td>
                                            <td class="text-center">
                                                <div class="d-flex justify-content-center">
                                                    <button class="btn btn-warning btn-sm btn-spacing" onclick="editAccount(@account.UserId)">
                                                        <i class="fa fa-edit"></i> Edit
                                                    </button>
                                                    <button class="btn btn-danger btn-sm" onclick="deleteAccount(@account.UserId)">
                                                        <i class="fa fa-trash"></i> Delete
                                                    </button>
                                                </div>
                                            </td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        </div>
                    }
                    else
                    {
                        <p class="text-center text-muted">No accounts found.</p>
                    }
                </div>
            </div>
        </div>
    </div>
</section>
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
<!-- Bootstrap 5 CSS -->
<link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
<!-- Bootstrap 5 JS -->
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
<style>
    .btn-spacing {
        margin-right: 10px;
    }
    .modal-body .form-label {
        font-weight: 600;
    }

    .modal-body .form-control {
        padding: 10px;
        border-radius: 5px;

    }
    .modal-body .btn {
        padding: 10px 15px;
        font-weight: 600;
    }
    .table {
    border-collapse: collapse;
    width: 100%;
}

.table th, .table td {
    border: 1px solid #ddd; 
    padding: 10px;
    text-align: center;
}

.table thead th {
    background-color: #f8f9fa; 
    border: 1px solid #ccc; 
}

.table tbody tr:hover {
    background-color: #f1f1f1; 
}

    #editRole {
        height: auto !important;
        min-height: 40px;
        padding: 8px 12px;
        line-height: normal;
    }
</style>

<script>
    function editAccount(accountId) {
        fetch(`/Users/GetUserById/${accountId}`)
            .then(response => response.json())
            .then(data => {
                if (data) {
                    document.getElementById("editUserId").value = data.userId;
                    document.getElementById("editUsername").value = data.username;
                    document.getElementById("editEmail").value = data.email;
                    document.getElementById("editFullName").value = data.fullName;
                    document.getElementById("editPhoneNumber").value = data.phoneNumber;
                    document.getElementById("editAddress").value = data.address;
                    document.getElementById("editRole").value = data.roleId;

                    var editModal = new bootstrap.Modal(document.getElementById('editAccountModal'));
                    editModal.show();
                } else {
                    Swal.fire("Error!", "User not found!", "error");
                }
            })
            .catch(() => Swal.fire("Error!", "Failed to load user data!", "error"));
    }

    document.getElementById("editAccountForm").addEventListener("submit", function (event) {
        event.preventDefault();

        var updatedUser = {
            UserId: document.getElementById("editUserId").value,
            Username: document.getElementById("editUsername").value,
            Email: document.getElementById("editEmail").value,
            FullName: document.getElementById("editFullName").value,
            PhoneNumber: document.getElementById("editPhoneNumber").value,
            Address: document.getElementById("editAddress").value,
            RoleId: document.getElementById("editRole").value
        };

        fetch(`/Users/UpdateUser`, {
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "X-Requested-With": "XMLHttpRequest"
            },
            body: JSON.stringify(updatedUser)
        })
        .then(response => response.json())
        .then(data => {
            if (data.success) {
                Swal.fire("Updated!", "User updated successfully.", "success")
                    .then(() => location.reload());
            } else {
                Swal.fire("Error!", "Failed to update user.", "error");
            }
        })
        .catch(() => Swal.fire("Error!", "Something went wrong!", "error"));
    });

        function deleteAccount(UserId) {
        Swal.fire({
            title: "Are you sure?",
            text: "You won't be able to revert this!",
            icon: "warning",
            showCancelButton: true,
            confirmButtonColor: "#d33",
            cancelButtonColor: "#6c757d",
            confirmButtonText: "Yes, delete it!"
        }).then((result) => {
            if (result.isConfirmed) {
                fetch(`/Users/DeleteUser/${UserId}`, {
                    method: "DELETE",
                    headers: {
                        "Content-Type": "application/json",
                        "X-Requested-With": "XMLHttpRequest"
                    }
                })
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        Swal.fire("Deleted!", "User has been deleted.", "success")
                            .then(() => location.reload()); 
                    } else {
                        Swal.fire("Error!", "Failed to delete user.", "error");
                    }
                })
                .catch(() => Swal.fire("Error!", "Something went wrong!", "error"));
            }
        });
    }
        document.getElementById("createAccountForm").addEventListener("submit", function (event) {
        event.preventDefault();

        const userData = {
            username: document.getElementById("createUsername").value.trim(),
            email: document.getElementById("createEmail").value.trim(),
            fullName: document.getElementById("createFullName").value.trim(),
            phoneNumber: document.getElementById("createPhoneNumber").value.trim(),
            address: document.getElementById("createAddress").value.trim(),
            passwordHash: document.getElementById("createPassword").value,
            roleId: parseInt(document.getElementById("createRole").value) || 2
        };

        fetch("/Users/CreateUser", {
            method: "POST",
            headers: {
                "Content-Type": "application/json"
            },
            body: JSON.stringify(userData)
        })
        .then(response => response.json())
        .then(data => {
            if (data.success) {
                Swal.fire("Success!", "User created successfully.", "success")
                    .then(() => location.reload());
            } else {
                Swal.fire("Error!", data.message || "Failed to create user.", "error");
            }
        })
        .catch(() => Swal.fire("Error!", "Something went wrong!", "error"));
    });


</script>
