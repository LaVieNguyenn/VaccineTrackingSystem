@model List<VaccineTrakingSystem.DAL.Models.Appointment>

<!-- CSS -->
<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css">
<link rel="stylesheet" href="https://cdn.datatables.net/1.13.6/css/jquery.dataTables.min.css">

<!-- JS -->
<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
<script src="https://cdn.datatables.net/1.13.6/js/jquery.dataTables.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>

<div class="container mt-4">
    <!-- Title & Actions -->
    <div class="d-flex justify-content-between align-items-center mb-3">
        <h3>Appointment List</h3>
        <div>
            <button class="btn btn-success" id="addAppointmentBtn">Add Appointment</button>
        </div>
    </div>

    <!-- Appointment Table -->
    <table id="appointmentTable" class="table table-striped">
        <thead>
            <tr>
                <th>Appointment ID</th>
                <th>Child Name</th>
                <th>Service</th>
                <th>Booking Date</th>
                <th>Status</th>
                <th>Payment Status</th>
                <th>Created At</th>
                <th>Updated At</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var appointment in Model)
            {
                <tr>
                    <td>@appointment.AppointmentId</td>
                    <td data-child-id="@appointment.ChildId">
                        @{
                            var childDictionary = ViewData["ChildDictionary"] as Dictionary<int, string>;
                            var childName = childDictionary != null && childDictionary.ContainsKey(appointment.ChildId)
                            ? childDictionary[appointment.ChildId]
                            : "Unknown";
                        }
                        @childName
                    </td>
                    <td data-service-id="@appointment.ServiceId"></td>
                    <td>@appointment.BookingDate.ToString("yyyy-MM-dd")</td>
                    <td>@(appointment.Status == 0 ? "Pending" : "Confirmed")</td>
                    <td>@(appointment.PaymentStatus == 0 ? "Unpaid" : "Paid")</td>
                    <td>@appointment.CreatedAt</td>
                    <td>@appointment.UpdatedAt</td>
                    <td>
                        <button class="btn btn-info generate-schedule-btn" data-id="@appointment.ChildId" data-app-id="@appointment.AppointmentId">Generate Schedule</button>
                        <button class="btn btn-primary edit-btn" data-id="@appointment.AppointmentId" data-child-id="@appointment.ChildId">Edit</button>
                        <button class="btn btn-danger delete-btn" data-id="@appointment.AppointmentId">Delete</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
</div>

<script>
    $(document).ready(function () {
        var table = $('#appointmentTable').DataTable();

        // Hàm lấy danh sách Service từ API
        function loadServices(callback) {
            fetch('/Appointment/GetAll', {
                method: 'GET',
                headers: { 'Content-Type': 'application/json' }
            })
            .then(response => {
                if (!response.ok) {
                    return response.text().then(text => {
                        throw new Error(`Failed to load services: ${response.status} ${response.statusText} - ${text}`);
                    });
                }
                return response.json();
            })
            .then(data => callback(data))
            .catch(error => {
                console.error('Error loading services:', error);
                Swal.fire('Error!', error.message, 'error');
            });
        }

        // Hàm lấy danh sách Child từ API
                function loadChildren(callback) {
        fetch('/Child/GetAll', {
            method: 'GET',
            headers: { 'Content-Type': 'application/json' }
        })
        .then(response => {
            if (!response.ok) {
                return response.text().then(text => {
                    throw new Error(`Failed to load children: ${response.status} ${response.statusText} - ${text}`);
                });
            }
            return response.json();
        })
        .then(data => {
            console.log('Children data:', data); // In dữ liệu để kiểm tra
            if (!data || data.length === 0) {
                console.warn('No children data returned');
                Swal.fire('Warning!', 'No children found in the system.', 'warning');
                callback([]);
            } else {
                callback(data);
            }
        })
        .catch(error => {
            console.error('Error loading children:', error);
            Swal.fire('Error!', error.message, 'error');
        });
    }

        // Ánh xạ ServiceId sang ServiceName trong bảng
        loadServices(services => {
            let serviceMap = {};
            services.forEach(s => {
                serviceMap[s.serviceId] = s.serviceName;
            });

            $('#appointmentTable tbody tr').each(function () {
                let serviceId = $(this).find('td[data-service-id]').data('service-id');
                $(this).find('td[data-service-id]').text(serviceMap[serviceId] || 'Unknown');
            });
        });

        // Add Appointment
     $('#addAppointmentBtn').on("click", function () {
        loadServices(services => {
            loadChildren(children => {
                let serviceOptions = services.map(s => `<option value="${s.serviceId}">${s.serviceName}</option>`).join('');
                let childOptions = children.map(c => `<option value="${c.childId}">${c.fullName}</option>`).join(''); // Sửa ChildId thành childId, FullName thành fullName

                Swal.fire({
                    title: "Add New Appointment",
                    width: 600,
                    html: `
                        <p>Child Name</p>
                        <select id="childId" class="swal2-select">
                            <option value="" disabled selected>Select a child</option>
                            ${childOptions}
                        </select>
                        <p>Service</p>
                        <select id="serviceId" class="swal2-select">
                            <option value="" disabled selected>Select a service</option>
                            ${serviceOptions}
                        </select>
                        <p>Appointment Date</p>
                        <input id="appointmentDate" class="swal2-input" type="date" placeholder="Appointment Date">
                        <p>Booking Date</p>
                        <input id="bookingDate" class="swal2-input" type="date" placeholder="Booking Date">
                    `,
                    showCancelButton: true,
                    confirmButtonText: "Save",
                    preConfirm: () => {
                        let bookingDate = $("#bookingDate").val();
                        let appointmentDate = $("#appointmentDate").val();
                        if (!bookingDate) {
                            let today = new Date();
                            let yyyy = today.getFullYear();
                            let mm = String(today.getMonth() + 1).padStart(2, "0");
                            let dd = String(today.getDate()).padStart(2, "0");
                            bookingDate = `${yyyy}-${mm}-${dd}`;
                        }
                        if (!appointmentDate) {
                            appointmentDate = bookingDate;
                        }

                        let data = {
                            ChildId: parseInt($("#childId").val()) || 0,
                            ServiceId: parseInt($("#serviceId").val()) || 0,
                            AppointmentDate: appointmentDate,
                            BookingDate: bookingDate,
                        };

                        if (!data.ChildId || !data.ServiceId || !data.BookingDate || !data.AppointmentDate) {
                            Swal.showValidationMessage("All fields are required!");
                            return false;
                        }

                        return fetch("/Appointment/Create", {
                            method: "POST",
                            headers: { "Content-Type": "application/json" },
                            body: JSON.stringify(data)
                        })
                        .then(response => {
                            if (!response.ok) {
                                return response.text().then(text => { throw new Error(text || "Failed to create appointment.") });
                            }
                            return response.json();
                        })
                        .catch(error => {
                            console.error("Fetch error:", error);
                            Swal.showValidationMessage(`Error: ${error.message}`);
                            return false;
                        });
                    }
                }).then(result => {
                    if (result.isConfirmed) {
                        Swal.fire("Success!", "Appointment added.", "success").then(() => location.reload());
                    }
                });
            });
        });
    });

        // Edit Appointment
        $(document).on("click", ".edit-btn", function () {
            let row = $(this).closest("tr");
            let appointmentId = $(this).data("id");
            let childId = $(this).data("child-id");

            let childName = row.find("td:eq(1)").text().trim();
            let serviceName = row.find("td:eq(2)").text().trim();
            let bookingDateRaw = row.find("td:eq(3)").text().trim();
            let status = row.find("td:eq(4)").text().trim() === "Pending" ? 0 : 1;
            let paymentStatus = row.find("td:eq(5)").text().trim() === "Unpaid" ? 0 : 1;

            let bookingDate = new Date(bookingDateRaw).toISOString().split("T")[0];

            loadServices(services => {
                loadChildren(children => {
                let serviceOptions = services.map(s => `<option value="${s.serviceId}">${s.serviceName}</option>`).join('');
                let childOptions = children.map(c => `<option value="${c.childId}">${c.fullName}</option>`).join('');

                    Swal.fire({
                        title: "Edit Appointment",
                        width: 600,
                        html: `
                            <p>Child Name</p>
                            <select id="editChildId" class="swal2-select">
                                <option value="" disabled>Select a child</option>
                                ${childOptions}
                            </select>
                            <p>Service</p>
                            <select id="editServiceId" class="swal2-select">
                                <option value="" disabled>Select a service</option>
                                ${serviceOptions}
                            </select>
                            <p>Appointment Date</p>
                            <input id="editAppointmentDate" class="swal2-input" type="date" value="${bookingDate}">
                            <p>Booking Date</p>
                            <input id="editBookingDate" class="swal2-input" type="date" value="${bookingDate}">
                        `,
                        showCancelButton: true,
                        confirmButtonText: "Save",
                        preConfirm: () => {
                            let appointmentDate = $("#editAppointmentDate").val();
                            let bookingDate = $("#editBookingDate").val();
                            if (!bookingDate) {
                                let today = new Date();
                                let yyyy = today.getFullYear();
                                let mm = String(today.getMonth() + 1).padStart(2, "0");
                                let dd = String(today.getDate()).padStart(2, "0");
                                bookingDate = `${yyyy}-${mm}-${dd}`;
                            }
                            if (!appointmentDate) {
                                appointmentDate = bookingDate;
                            }

                            let data = {
                                AppointmentId: parseInt(appointmentId),
                                ChildId: parseInt($("#editChildId").val()) || 0,
                                ServiceId: parseInt($("#editServiceId").val()) || 0,
                                AppointmentDate: appointmentDate,
                                BookingDate: bookingDate
                            };

                            if (!data.AppointmentId || !data.ChildId || !data.ServiceId || !data.BookingDate || !data.AppointmentDate) {
                                Swal.showValidationMessage("All fields are required!");
                                return false;
                            }

                            console.log("Sending data:", JSON.stringify(data));

                            return fetch(`/Appointment/Update`, {
                                method: "PUT",
                                headers: { "Content-Type": "application/json" },
                                body: JSON.stringify(data)
                            })
                            .then(response => {
                                if (!response.ok) {
                                    return response.text().then(text => { throw new Error(text || "Failed to update appointment.") });
                                }
                                return response.json();
                            })
                            .catch(error => {
                                console.error("Fetch error:", error);
                                Swal.showValidationMessage(`Error: ${error.message}`);
                                return false;
                            });
                        }
                    }).then(result => {
                        if (result.isConfirmed) {
                            Swal.fire("Success!", "Appointment updated.", "success").then(() => location.reload());
                        }
                    });
                });
            });
        });
        // Delete Appointment
        $(document).on("click", ".delete-btn", function () {
            let appointmentId = $(this).data("id");

            Swal.fire({
                title: "Are you sure?",
                text: "This action cannot be undone!",
                icon: "warning",
                showCancelButton: true,
                confirmButtonText: "Yes, delete it!"
            }).then(result => {
                if (result.isConfirmed) {
                    fetch(`/Appointment/Cancel/${appointmentId}`, { method: "DELETE" })
                        .then(() => Swal.fire("Deleted!", "Appointment removed.", "success").then(() => location.reload()))
                        .catch(() => Swal.fire("Error!", "Failed to delete appointment.", "error"));
                }
            });
        });
    });
            // Generate Schedule
        $(document).on("click", ".generate-schedule-btn", function () {
            let childId = $(this).data("id");
            let id = $(this).data("app-id");
            console.log(id);
            console.log("SignalR connected.");

            Swal.fire({
                title: "Generate Vaccination Schedule",
                text: `Are you sure you want to generate a schedule for Child ID: ${childId}?`,
                icon: "question",
                showCancelButton: true,
                confirmButtonText: "Yes, generate it!"
            }).then(result => {
                if (result.isConfirmed) {
                    fetch(`/Child/GenerateSchedule/${childId}&${id}`, {
                        method: "POST",
                        headers: { "Content-Type": "application/json" }
                    })
                    .then(response => {
                        if (!response.ok) {
                            return response.text().then(text => { throw new Error(text) });
                        }
                        return response.json();
                    })
                    .then(data => {
                        const scheduleCount = data.schedules ? data.schedules.length : 0;
                        Swal.fire({
                            title: "Success!",
                            text: data.message,
                            icon: "success",
                            html: `
                                <p>${data.message}</p>
                                <p>Generated ${scheduleCount} schedules.</p>
                            `
                        });
                    })
                    .catch(error => {
                        console.error("Fetch error:", error);
                        Swal.fire("Error!", `Failed to generate schedule: ${error.message}`, "error");
                    });
                }
            });
        });
</script>